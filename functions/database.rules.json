{
  "rules": {
    "rooms": {
      ".read": "auth != null"
    },
    "messages": {
      ".read": "auth != null",
      "$room_id": {
        "$message_id": {
          // allow all authed users to create message
          // edit/delete aren't common operations, handle in an http function instead
          // otherwise RTDB rules get ridiculous
          ".write": "auth != null && (!data.exists() && newData.exists())",
          ".validate": "newData.hasChildren(['name', 'uid', 'message', 'sentAt', 'photo'])",
          "uid": { ".validate": "newData.val() === auth.uid" },
          "name": { ".validate": "newData.val() === auth.token.name" },
          "sentAt": { ".validate": "newData.val() == now" },
          "photo": {
            ".validate": "newData.val().contains('.googleusercontent.com/')"
          },
          "message": {
            ".validate": "newData.isString()"
          }
        }
      }
    },
    "music": {
      ".read": "auth != null",
      "$room_id": {
        "nowplaying": {
          // allow increment by one of skipCount
          "skipCount": {
            ".write": "auth != null && ((data.exists() && newData.exists()) || (newData.exists() && !data.exists()))",
            ".validate": "newData.isNumber() && (newData.val() === data.val() + 1 || newData.val() === 1)"
          },
          "$track_id": {
            // allow update and removal by any authed user
            ".write": "auth != null && ((data.exists() && !newData.exists() && data.child('endTime').val() <= now / 1000) || (data.exists() && newData.exists()))",
            // validates below are not ran with remove requests
            ".validate": "newData.hasChildren(['rescrape'])",
            "rescrape": {
              ".validate": "newData.val() === true"
            }
          }
        }
      }
    },
    "status": {
      ".read": "auth != null",
      "$room_id": {
        "$uid": {
          ".write": "auth.uid == $uid"
        }
      }
    }
  }
}
